import streamlit as st
import plotly.express as px
import plotly.graph_objects as go

wheel_of_life = {
    "Freizeit": {
        "üéÆ Konnte zoocken": 1,
        "üé¨ Konnte Filme schauen": 1,
        "üì∫ Konnte Serien schauen": 1,
        "üéµ Konnte Musik h√∂ren": 1,
        "üå≥ Konnte Zeit in der Natur verbringen": 2,
        "üì± Nur am Handy verbracht": -2,
        "üòë Langeweile gehabt": -1,
    },
    "Arbeit & Karriere": {
        "üíº Konnte arbeiten": 2,
        "üìö Konnte lernen": 2,
        "üé® Konnte kreativ sein": 2,
        "‚úÖ Konnte Projekte abschlie√üen": 2,
        "üßò Konnte entspannen": 1,
        "‚è≥ Arbeit aufgeschoben": -2,
        "‚ùå Fehler gemacht": -1,
    },
    "Pers√∂nliche Wachstum": {
        "üìñ Konnte lesen": 2,
        "üìö Konnte lernen": 2,
        "‚úçÔ∏è Konnte schreiben": 2,
        "üé® Konnte kreativ sein": 2,
        "ü§î Konnte reflektieren": 2,
        "‚è∞ Keine Zeit f√ºr Entwicklung": -2,
        "üòï Unzufrieden mit Fortschritt": -1,
    },
    "Wohlbefinden": {
        "üßò Konnte entspannen": 2,
        "üßò‚Äç‚ôÇÔ∏è Konnte meditieren": 2,
        "üò¥ Konnte ausreichend schlafen": 2,
        "üé® Konnte kreativ sein": 2,
        "üìñ Konnte lesen": 2,
        "üò∞ Gestresst gef√ºhlt": -2,
        "üåô Zu wenig Schlaf": -1,
    },
    "Gesundheit & Fitness": {
        "üèÉ‚Äç‚ôÇÔ∏è Konnte joggen": 2,
        "üßò‚Äç‚ôÄÔ∏è Konnte Yoga machen": 2,
        "üßò Konnte meditieren": 2,
        "ü•ó Konnte gesund essen": 2,
        "üìã Essen getrackt": 2,
        "üçî Fast Food gegessen": -2,
        "üõãÔ∏è Kein Sport gemacht": -1,
    },
    "Komfortzone": {
        "üÜï Konnte neue Dinge ausprobieren": 2,
        "üí™ Konnte mich Herausforderungen stellen": 2,
        "üò® Konnte √Ñngste √ºberwinden": 2,
        "üó£Ô∏è Konnte Feedback annehmen": 2,
        "üîÑ Konnte aus Fehlern lernen": 2,
        "üôà Neues vermieden": -2,
        "üòü Aus Angst zur√ºckgezogen": -1,
    },
    "Werte gelebt": {
        "ü§ù Ehrlich gewesen": 2,
        "ü§≤ Hilfsbereit gewesen": 2,
        "üßë‚Äçüíº Verantwortung √ºbernommen": 2,
        "üôè Respektvoll gehandelt": 2,
        "üå± Nachhaltig gehandelt": 2,
        "üö´ Werte ignoriert": -2,
        "üôÉ Unaufrichtig gewesen": -1,
    },
    "Beziehung & Liebe": {
        "üíã Guten Morgen Kuss gegeben": 2,
        "üíã Guten Abend Kuss gegeben": 2,
        "‚ù§Ô∏è Zeit mit Partner verbracht": 2,
        "üí¨ Offen kommuniziert": 2,
        "üòÑ Spa√ü gehabt": 2,
        "üíî Streit gehabt": -2,
        "üôÑ Wenig Aufmerksamkeit geschenkt": -1,
    },
    "Sozialleben": {
        "üë´ Konnte Freunde treffen": 2,
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Konnte Familie treffen": 2,
        "üßë‚Äçü§ù‚Äçüßë Konnte neue Leute kennenlernen": 2,
        "üó£Ô∏è Gute Gespr√§che gef√ºhrt": 2,
        "ü§ó Jemandem geholfen": 2,
        "üò° Streit mit Freunden": -2,
        "üòî Einsam gef√ºhlt": -1,
    },
    "Finanzen": {
        "ü§ë Kein Geld ausgegeben": 5,
        "üí≥ Konnte Rechnungen bezahlen": 2,
        "üí∞ Konnte Geld sparen": 2,
        "üìà Konnte Geld investieren": 2,
        "üíµ Konnte Geld verdienen": 2,
        "üìä Ausgaben getrackt": 2,
        "üí∏ Geld verschwendet": -3,
    },
}

def page_kompass():
    st.title("Wheel of Life Kompass")
    st.write("Setze f√ºr jede Option ein H√§kchen. Die Punkte werden entsprechend der Option gez√§hlt (max. 10 pro Bereich, negative Werte werden abgezogen):")

    with st.sidebar:
        values = []
        bereiche = list(wheel_of_life.keys())
        for t in bereiche:
            with st.expander(t, expanded=False):
                checked_sum = 0
                negative_sum = 0
                for opt, val in wheel_of_life[t].items():
                    checked = st.checkbox(opt, key=f"cb_{t}_{opt}")
                    if checked:
                        if val > 0:
                            checked_sum += val
                        else:
                            negative_sum += val
                # Normierung: max. 10 Punkte f√ºr alle positiven Werte
                max_positive = sum([v for v in wheel_of_life[t].values() if v > 0])
                if max_positive > 0:
                    norm_points = (checked_sum / max_positive) * 10
                else:
                    norm_points = 0
                total_points = norm_points + negative_sum
                # Werte auf 0 bis 10 begrenzen
                total_points = max(0, min(10, total_points))
                values.append(total_points)

    # Radardiagramm
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=values + [values[0]],  # schlie√üt das Rad
        theta=bereiche + [bereiche[0]],
        fill='toself',
        name='Wheel of Life',
        marker_color='royalblue'
    ))
    fig.update_layout(
        polar=dict(
            radialaxis=dict(visible=True, range=[0, 10])
        ),
        showlegend=False,
        title="Dein Wheel of Life (Radar Chart)"
    )
    st.plotly_chart(fig)


if __name__ == "__main__":
    page_kompass()
